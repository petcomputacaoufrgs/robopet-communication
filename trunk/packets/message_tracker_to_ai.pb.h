// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_message_5ftracker_5fto_5fai_2eproto__INCLUDED
#define PROTOBUF_message_5ftracker_5fto_5fai_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_message_5ftracker_5fto_5fai_2eproto();
void protobuf_BuildDesc_message_5ftracker_5fto_5fai_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class BallTracker;
class RobotTracker;
class TrackerToAI;

// ===================================================================

class BallTracker : public ::google::protobuf::Message {
 public:
  BallTracker();
  virtual ~BallTracker();
  
  BallTracker(const BallTracker& from);
  
  inline BallTracker& operator=(const BallTracker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BallTracker& default_instance();
  void Swap(BallTracker* other);
  
  // implements Message ----------------------------------------------
  
  BallTracker* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);
  
  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void protobuf_BuildDesc_message_5ftracker_5fto_5fai_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BallTracker* default_instance_;
};
// -------------------------------------------------------------------

class RobotTracker : public ::google::protobuf::Message {
 public:
  RobotTracker();
  virtual ~RobotTracker();
  
  RobotTracker(const RobotTracker& from);
  
  inline RobotTracker& operator=(const RobotTracker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotTracker& default_instance();
  void Swap(RobotTracker* other);
  
  // implements Message ----------------------------------------------
  
  RobotTracker* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  inline double y() const;
  inline void set_y(double value);
  
  // required double theta = 3;
  inline bool has_theta() const;
  inline void clear_theta();
  inline double theta() const;
  inline void set_theta(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double x_;
  double y_;
  double theta_;
  friend void protobuf_BuildDesc_message_5ftracker_5fto_5fai_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RobotTracker* default_instance_;
};
// -------------------------------------------------------------------

class TrackerToAI : public ::google::protobuf::Message {
 public:
  TrackerToAI();
  virtual ~TrackerToAI();
  
  TrackerToAI(const TrackerToAI& from);
  
  inline TrackerToAI& operator=(const TrackerToAI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerToAI& default_instance();
  void Swap(TrackerToAI* other);
  
  // implements Message ----------------------------------------------
  
  TrackerToAI* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .BallTracker ball = 1;
  inline bool has_ball() const;
  inline void clear_ball();
  inline const ::BallTracker& ball() const;
  inline ::BallTracker* mutable_ball();
  
  // repeated .RobotTracker robots_blue = 2;
  inline int robots_blue_size() const;
  inline void clear_robots_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotTracker >& robots_blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotTracker >* mutable_robots_blue();
  inline const ::RobotTracker& robots_blue(int index) const;
  inline ::RobotTracker* mutable_robots_blue(int index);
  inline ::RobotTracker* add_robots_blue();
  
  // repeated .RobotTracker robots_yellow = 3;
  inline int robots_yellow_size() const;
  inline void clear_robots_yellow();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotTracker >& robots_yellow() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotTracker >* mutable_robots_yellow();
  inline const ::RobotTracker& robots_yellow(int index) const;
  inline ::RobotTracker* mutable_robots_yellow(int index);
  inline ::RobotTracker* add_robots_yellow();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::BallTracker* ball_;
  ::google::protobuf::RepeatedPtrField< ::RobotTracker > robots_blue_;
  ::google::protobuf::RepeatedPtrField< ::RobotTracker > robots_yellow_;
  friend void protobuf_BuildDesc_message_5ftracker_5fto_5fai_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TrackerToAI* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// BallTracker

// required uint32 x = 1;
inline bool BallTracker::has_x() const {
  return _has_bit(0);
}
inline void BallTracker::clear_x() {
  x_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 BallTracker::x() const {
  return x_;
}
inline void BallTracker::set_x(::google::protobuf::uint32 value) {
  _set_bit(0);
  x_ = value;
}

// required uint32 y = 2;
inline bool BallTracker::has_y() const {
  return _has_bit(1);
}
inline void BallTracker::clear_y() {
  y_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 BallTracker::y() const {
  return y_;
}
inline void BallTracker::set_y(::google::protobuf::uint32 value) {
  _set_bit(1);
  y_ = value;
}

// -------------------------------------------------------------------

// RobotTracker

// required double x = 1;
inline bool RobotTracker::has_x() const {
  return _has_bit(0);
}
inline void RobotTracker::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline double RobotTracker::x() const {
  return x_;
}
inline void RobotTracker::set_x(double value) {
  _set_bit(0);
  x_ = value;
}

// required double y = 2;
inline bool RobotTracker::has_y() const {
  return _has_bit(1);
}
inline void RobotTracker::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline double RobotTracker::y() const {
  return y_;
}
inline void RobotTracker::set_y(double value) {
  _set_bit(1);
  y_ = value;
}

// required double theta = 3;
inline bool RobotTracker::has_theta() const {
  return _has_bit(2);
}
inline void RobotTracker::clear_theta() {
  theta_ = 0;
  _clear_bit(2);
}
inline double RobotTracker::theta() const {
  return theta_;
}
inline void RobotTracker::set_theta(double value) {
  _set_bit(2);
  theta_ = value;
}

// -------------------------------------------------------------------

// TrackerToAI

// required .BallTracker ball = 1;
inline bool TrackerToAI::has_ball() const {
  return _has_bit(0);
}
inline void TrackerToAI::clear_ball() {
  if (ball_ != NULL) ball_->::BallTracker::Clear();
  _clear_bit(0);
}
inline const ::BallTracker& TrackerToAI::ball() const {
  return ball_ != NULL ? *ball_ : *default_instance_->ball_;
}
inline ::BallTracker* TrackerToAI::mutable_ball() {
  _set_bit(0);
  if (ball_ == NULL) ball_ = new ::BallTracker;
  return ball_;
}

// repeated .RobotTracker robots_blue = 2;
inline int TrackerToAI::robots_blue_size() const {
  return robots_blue_.size();
}
inline void TrackerToAI::clear_robots_blue() {
  robots_blue_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotTracker >&
TrackerToAI::robots_blue() const {
  return robots_blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotTracker >*
TrackerToAI::mutable_robots_blue() {
  return &robots_blue_;
}
inline const ::RobotTracker& TrackerToAI::robots_blue(int index) const {
  return robots_blue_.Get(index);
}
inline ::RobotTracker* TrackerToAI::mutable_robots_blue(int index) {
  return robots_blue_.Mutable(index);
}
inline ::RobotTracker* TrackerToAI::add_robots_blue() {
  return robots_blue_.Add();
}

// repeated .RobotTracker robots_yellow = 3;
inline int TrackerToAI::robots_yellow_size() const {
  return robots_yellow_.size();
}
inline void TrackerToAI::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotTracker >&
TrackerToAI::robots_yellow() const {
  return robots_yellow_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotTracker >*
TrackerToAI::mutable_robots_yellow() {
  return &robots_yellow_;
}
inline const ::RobotTracker& TrackerToAI::robots_yellow(int index) const {
  return robots_yellow_.Get(index);
}
inline ::RobotTracker* TrackerToAI::mutable_robots_yellow(int index) {
  return robots_yellow_.Mutable(index);
}
inline ::RobotTracker* TrackerToAI::add_robots_yellow() {
  return robots_yellow_.Add();
}

#endif  // PROTOBUF_message_5ftracker_5fto_5fai_2eproto__INCLUDED
