// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_ai_to_gui.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GUIRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUIRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* GUIBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUIBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIToGUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIToGUI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fai_5fto_5fgui_2eproto() {
  protobuf_AddDesc_message_5fai_5fto_5fgui_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_ai_to_gui.proto");
  GOOGLE_CHECK(file != NULL);
  GUIRobot_descriptor_ = file->message_type(0);
  static const int GUIRobot_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, current_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, current_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, current_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, future_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, future_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, future_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, past_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, past_y_),
  };
  GUIRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GUIRobot_descriptor_,
      GUIRobot::default_instance_,
      GUIRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GUIRobot));
  GUIBall_descriptor_ = file->message_type(1);
  static const int GUIBall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIBall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIBall, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIBall, past_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIBall, past_y_),
  };
  GUIBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GUIBall_descriptor_,
      GUIBall::default_instance_,
      GUIBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUIBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GUIBall));
  AIToGUI_descriptor_ = file->message_type(2);
  static const int AIToGUI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToGUI, blue_robots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToGUI, yellow_robots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToGUI, ball_),
  };
  AIToGUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIToGUI_descriptor_,
      AIToGUI::default_instance_,
      AIToGUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToGUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToGUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIToGUI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fai_5fto_5fgui_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GUIRobot_descriptor_, &GUIRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GUIBall_descriptor_, &GUIBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIToGUI_descriptor_, &AIToGUI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fai_5fto_5fgui_2eproto() {
  delete GUIRobot::default_instance_;
  delete GUIRobot_reflection_;
  delete GUIBall::default_instance_;
  delete GUIBall_reflection_;
  delete AIToGUI::default_instance_;
  delete AIToGUI_reflection_;
}

void protobuf_AddDesc_message_5fai_5fto_5fgui_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027message_ai_to_gui.proto\"\241\001\n\010GUIRobot\022\021"
    "\n\tcurrent_x\030\001 \002(\005\022\021\n\tcurrent_y\030\002 \002(\005\022\025\n\r"
    "current_theta\030\003 \002(\005\022\020\n\010future_x\030\004 \002(\005\022\020\n"
    "\010future_y\030\005 \002(\005\022\024\n\014future_theta\030\006 \002(\005\022\016\n"
    "\006past_x\030\007 \002(\005\022\016\n\006past_y\030\010 \002(\005\"?\n\007GUIBall"
    "\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\016\n\006past_x\030\003 \002(\005\022\016"
    "\n\006past_y\030\004 \002(\005\"c\n\007AIToGUI\022\036\n\013blue_robots"
    "\030\001 \003(\0132\t.GUIRobot\022 \n\ryellow_robots\030\002 \003(\013"
    "2\t.GUIRobot\022\026\n\004ball\030\003 \002(\0132\010.GUIBall", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_ai_to_gui.proto", &protobuf_RegisterTypes);
  GUIRobot::default_instance_ = new GUIRobot();
  GUIBall::default_instance_ = new GUIBall();
  AIToGUI::default_instance_ = new AIToGUI();
  GUIRobot::default_instance_->InitAsDefaultInstance();
  GUIBall::default_instance_->InitAsDefaultInstance();
  AIToGUI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fai_5fto_5fgui_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fai_5fto_5fgui_2eproto {
  StaticDescriptorInitializer_message_5fai_5fto_5fgui_2eproto() {
    protobuf_AddDesc_message_5fai_5fto_5fgui_2eproto();
  }
} static_descriptor_initializer_message_5fai_5fto_5fgui_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GUIRobot::kCurrentXFieldNumber;
const int GUIRobot::kCurrentYFieldNumber;
const int GUIRobot::kCurrentThetaFieldNumber;
const int GUIRobot::kFutureXFieldNumber;
const int GUIRobot::kFutureYFieldNumber;
const int GUIRobot::kFutureThetaFieldNumber;
const int GUIRobot::kPastXFieldNumber;
const int GUIRobot::kPastYFieldNumber;
#endif  // !_MSC_VER

GUIRobot::GUIRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GUIRobot::InitAsDefaultInstance() {
}

GUIRobot::GUIRobot(const GUIRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GUIRobot::SharedCtor() {
  _cached_size_ = 0;
  current_x_ = 0;
  current_y_ = 0;
  current_theta_ = 0;
  future_x_ = 0;
  future_y_ = 0;
  future_theta_ = 0;
  past_x_ = 0;
  past_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUIRobot::~GUIRobot() {
  SharedDtor();
}

void GUIRobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GUIRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUIRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUIRobot_descriptor_;
}

const GUIRobot& GUIRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fai_5fto_5fgui_2eproto();  return *default_instance_;
}

GUIRobot* GUIRobot::default_instance_ = NULL;

GUIRobot* GUIRobot::New() const {
  return new GUIRobot;
}

void GUIRobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_x_ = 0;
    current_y_ = 0;
    current_theta_ = 0;
    future_x_ = 0;
    future_y_ = 0;
    future_theta_ = 0;
    past_x_ = 0;
    past_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GUIRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 current_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_y;
        break;
      }
      
      // required int32 current_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_theta;
        break;
      }
      
      // required int32 current_theta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_theta_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_future_x;
        break;
      }
      
      // required int32 future_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_future_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &future_x_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_future_y;
        break;
      }
      
      // required int32 future_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_future_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &future_y_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_future_theta;
        break;
      }
      
      // required int32 future_theta = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_future_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &future_theta_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_past_x;
        break;
      }
      
      // required int32 past_x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_past_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &past_x_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_past_y;
        break;
      }
      
      // required int32 past_y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_past_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &past_y_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GUIRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 current_x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_x(), output);
  }
  
  // required int32 current_y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_y(), output);
  }
  
  // required int32 current_theta = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_theta(), output);
  }
  
  // required int32 future_x = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->future_x(), output);
  }
  
  // required int32 future_y = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->future_y(), output);
  }
  
  // required int32 future_theta = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->future_theta(), output);
  }
  
  // required int32 past_x = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->past_x(), output);
  }
  
  // required int32 past_y = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->past_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GUIRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 current_x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_x(), target);
  }
  
  // required int32 current_y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_y(), target);
  }
  
  // required int32 current_theta = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_theta(), target);
  }
  
  // required int32 future_x = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->future_x(), target);
  }
  
  // required int32 future_y = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->future_y(), target);
  }
  
  // required int32 future_theta = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->future_theta(), target);
  }
  
  // required int32 past_x = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->past_x(), target);
  }
  
  // required int32 past_y = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->past_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GUIRobot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 current_x = 1;
    if (has_current_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_x());
    }
    
    // required int32 current_y = 2;
    if (has_current_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_y());
    }
    
    // required int32 current_theta = 3;
    if (has_current_theta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_theta());
    }
    
    // required int32 future_x = 4;
    if (has_future_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->future_x());
    }
    
    // required int32 future_y = 5;
    if (has_future_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->future_y());
    }
    
    // required int32 future_theta = 6;
    if (has_future_theta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->future_theta());
    }
    
    // required int32 past_x = 7;
    if (has_past_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->past_x());
    }
    
    // required int32 past_y = 8;
    if (has_past_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->past_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUIRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GUIRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GUIRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GUIRobot::MergeFrom(const GUIRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_current_x(from.current_x());
    }
    if (from._has_bit(1)) {
      set_current_y(from.current_y());
    }
    if (from._has_bit(2)) {
      set_current_theta(from.current_theta());
    }
    if (from._has_bit(3)) {
      set_future_x(from.future_x());
    }
    if (from._has_bit(4)) {
      set_future_y(from.future_y());
    }
    if (from._has_bit(5)) {
      set_future_theta(from.future_theta());
    }
    if (from._has_bit(6)) {
      set_past_x(from.past_x());
    }
    if (from._has_bit(7)) {
      set_past_y(from.past_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GUIRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUIRobot::CopyFrom(const GUIRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUIRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void GUIRobot::Swap(GUIRobot* other) {
  if (other != this) {
    std::swap(current_x_, other->current_x_);
    std::swap(current_y_, other->current_y_);
    std::swap(current_theta_, other->current_theta_);
    std::swap(future_x_, other->future_x_);
    std::swap(future_y_, other->future_y_);
    std::swap(future_theta_, other->future_theta_);
    std::swap(past_x_, other->past_x_);
    std::swap(past_y_, other->past_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GUIRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUIRobot_descriptor_;
  metadata.reflection = GUIRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GUIBall::kXFieldNumber;
const int GUIBall::kYFieldNumber;
const int GUIBall::kPastXFieldNumber;
const int GUIBall::kPastYFieldNumber;
#endif  // !_MSC_VER

GUIBall::GUIBall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GUIBall::InitAsDefaultInstance() {
}

GUIBall::GUIBall(const GUIBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GUIBall::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  past_x_ = 0;
  past_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUIBall::~GUIBall() {
  SharedDtor();
}

void GUIBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GUIBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUIBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUIBall_descriptor_;
}

const GUIBall& GUIBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fai_5fto_5fgui_2eproto();  return *default_instance_;
}

GUIBall* GUIBall::default_instance_ = NULL;

GUIBall* GUIBall::New() const {
  return new GUIBall;
}

void GUIBall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    past_x_ = 0;
    past_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GUIBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_past_x;
        break;
      }
      
      // required int32 past_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_past_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &past_x_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_past_y;
        break;
      }
      
      // required int32 past_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_past_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &past_y_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GUIBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // required int32 past_x = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->past_x(), output);
  }
  
  // required int32 past_y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->past_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GUIBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // required int32 y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  // required int32 past_x = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->past_x(), target);
  }
  
  // required int32 past_y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->past_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GUIBall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // required int32 past_x = 3;
    if (has_past_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->past_x());
    }
    
    // required int32 past_y = 4;
    if (has_past_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->past_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUIBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GUIBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GUIBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GUIBall::MergeFrom(const GUIBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_past_x(from.past_x());
    }
    if (from._has_bit(3)) {
      set_past_y(from.past_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GUIBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUIBall::CopyFrom(const GUIBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUIBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GUIBall::Swap(GUIBall* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(past_x_, other->past_x_);
    std::swap(past_y_, other->past_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GUIBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUIBall_descriptor_;
  metadata.reflection = GUIBall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIToGUI::kBlueRobotsFieldNumber;
const int AIToGUI::kYellowRobotsFieldNumber;
const int AIToGUI::kBallFieldNumber;
#endif  // !_MSC_VER

AIToGUI::AIToGUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIToGUI::InitAsDefaultInstance() {
  ball_ = const_cast< ::GUIBall*>(&::GUIBall::default_instance());
}

AIToGUI::AIToGUI(const AIToGUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIToGUI::SharedCtor() {
  _cached_size_ = 0;
  ball_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIToGUI::~AIToGUI() {
  SharedDtor();
}

void AIToGUI::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void AIToGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIToGUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIToGUI_descriptor_;
}

const AIToGUI& AIToGUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fai_5fto_5fgui_2eproto();  return *default_instance_;
}

AIToGUI* AIToGUI::default_instance_ = NULL;

AIToGUI* AIToGUI::New() const {
  return new AIToGUI;
}

void AIToGUI::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (_has_bit(2)) {
      if (ball_ != NULL) ball_->::GUIBall::Clear();
    }
  }
  blue_robots_.Clear();
  yellow_robots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIToGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GUIRobot blue_robots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue_robots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blue_robots;
        if (input->ExpectTag(18)) goto parse_yellow_robots;
        break;
      }
      
      // repeated .GUIRobot yellow_robots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yellow_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yellow_robots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yellow_robots;
        if (input->ExpectTag(26)) goto parse_ball;
        break;
      }
      
      // required .GUIBall ball = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIToGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GUIRobot blue_robots = 1;
  for (int i = 0; i < this->blue_robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blue_robots(i), output);
  }
  
  // repeated .GUIRobot yellow_robots = 2;
  for (int i = 0; i < this->yellow_robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yellow_robots(i), output);
  }
  
  // required .GUIBall ball = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ball(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIToGUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GUIRobot blue_robots = 1;
  for (int i = 0; i < this->blue_robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blue_robots(i), target);
  }
  
  // repeated .GUIRobot yellow_robots = 2;
  for (int i = 0; i < this->yellow_robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yellow_robots(i), target);
  }
  
  // required .GUIBall ball = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ball(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIToGUI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .GUIBall ball = 3;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }
    
  }
  // repeated .GUIRobot blue_robots = 1;
  total_size += 1 * this->blue_robots_size();
  for (int i = 0; i < this->blue_robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue_robots(i));
  }
  
  // repeated .GUIRobot yellow_robots = 2;
  total_size += 1 * this->yellow_robots_size();
  for (int i = 0; i < this->yellow_robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yellow_robots(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIToGUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIToGUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIToGUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIToGUI::MergeFrom(const AIToGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  blue_robots_.MergeFrom(from.blue_robots_);
  yellow_robots_.MergeFrom(from.yellow_robots_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      mutable_ball()->::GUIBall::MergeFrom(from.ball());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIToGUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIToGUI::CopyFrom(const AIToGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIToGUI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < blue_robots_size(); i++) {
    if (!this->blue_robots(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yellow_robots_size(); i++) {
    if (!this->yellow_robots(i).IsInitialized()) return false;
  }
  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  return true;
}

void AIToGUI::Swap(AIToGUI* other) {
  if (other != this) {
    blue_robots_.Swap(&other->blue_robots_);
    yellow_robots_.Swap(&other->yellow_robots_);
    std::swap(ball_, other->ball_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIToGUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIToGUI_descriptor_;
  metadata.reflection = AIToGUI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
