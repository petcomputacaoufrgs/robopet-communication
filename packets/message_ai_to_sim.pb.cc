// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_ai_to_sim.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KickAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIToSim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIToSim_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fai_5fto_5fsim_2eproto() {
  protobuf_AddDesc_message_5fai_5fto_5fsim_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_ai_to_sim.proto");
  GOOGLE_CHECK(file != NULL);
  KickAI_descriptor_ = file->message_type(0);
  static const int KickAI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickAI, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickAI, is_chip_kick_),
  };
  KickAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickAI_descriptor_,
      KickAI::default_instance_,
      KickAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickAI));
  RobotAI_descriptor_ = file->message_type(1);
  static const int RobotAI_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, omega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, movement_intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, future_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, future_y_),
  };
  RobotAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotAI_descriptor_,
      RobotAI::default_instance_,
      RobotAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotAI));
  AIToSim_descriptor_ = file->message_type(2);
  static const int AIToSim_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToSim, robots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToSim, team_),
  };
  AIToSim_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIToSim_descriptor_,
      AIToSim::default_instance_,
      AIToSim_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToSim, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIToSim, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIToSim));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fai_5fto_5fsim_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickAI_descriptor_, &KickAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotAI_descriptor_, &RobotAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIToSim_descriptor_, &AIToSim::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fai_5fto_5fsim_2eproto() {
  delete KickAI::default_instance_;
  delete KickAI_reflection_;
  delete RobotAI::default_instance_;
  delete RobotAI_reflection_;
  delete AIToSim::default_instance_;
  delete AIToSim_reflection_;
}

void protobuf_AddDesc_message_5fai_5fto_5fsim_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027message_ai_to_sim.proto\"1\n\006KickAI\022\021\n\ti"
    "ntensity\030\001 \002(\r\022\024\n\014is_chip_kick\030\002 \002(\010\"\211\001\n"
    "\007RobotAI\022\t\n\001r\030\003 \002(\001\022\r\n\005theta\030\004 \002(\001\022\r\n\005om"
    "ega\030\005 \002(\001\022\032\n\022movement_intensity\030\006 \002(\001\022\025\n"
    "\004kick\030\007 \002(\0132\007.KickAI\022\020\n\010future_x\030\010 \001(\r\022\020"
    "\n\010future_y\030\t \001(\r\"1\n\007AIToSim\022\030\n\006robots\030\001 "
    "\003(\0132\010.RobotAI\022\014\n\004team\030\002 \002(\r", 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_ai_to_sim.proto", &protobuf_RegisterTypes);
  KickAI::default_instance_ = new KickAI();
  RobotAI::default_instance_ = new RobotAI();
  AIToSim::default_instance_ = new AIToSim();
  KickAI::default_instance_->InitAsDefaultInstance();
  RobotAI::default_instance_->InitAsDefaultInstance();
  AIToSim::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fai_5fto_5fsim_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fai_5fto_5fsim_2eproto {
  StaticDescriptorInitializer_message_5fai_5fto_5fsim_2eproto() {
    protobuf_AddDesc_message_5fai_5fto_5fsim_2eproto();
  }
} static_descriptor_initializer_message_5fai_5fto_5fsim_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int KickAI::kIntensityFieldNumber;
const int KickAI::kIsChipKickFieldNumber;
#endif  // !_MSC_VER

KickAI::KickAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickAI::InitAsDefaultInstance() {
}

KickAI::KickAI(const KickAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickAI::SharedCtor() {
  _cached_size_ = 0;
  intensity_ = 0u;
  is_chip_kick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickAI::~KickAI() {
  SharedDtor();
}

void KickAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickAI_descriptor_;
}

const KickAI& KickAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fai_5fto_5fsim_2eproto();  return *default_instance_;
}

KickAI* KickAI::default_instance_ = NULL;

KickAI* KickAI::New() const {
  return new KickAI;
}

void KickAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    intensity_ = 0u;
    is_chip_kick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 intensity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensity_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_chip_kick;
        break;
      }
      
      // required bool is_chip_kick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_chip_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_chip_kick_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 intensity = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->intensity(), output);
  }
  
  // required bool is_chip_kick = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_chip_kick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 intensity = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->intensity(), target);
  }
  
  // required bool is_chip_kick = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_chip_kick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickAI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 intensity = 1;
    if (has_intensity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensity());
    }
    
    // required bool is_chip_kick = 2;
    if (has_is_chip_kick()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickAI::MergeFrom(const KickAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_intensity(from.intensity());
    }
    if (from._has_bit(1)) {
      set_is_chip_kick(from.is_chip_kick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickAI::CopyFrom(const KickAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickAI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KickAI::Swap(KickAI* other) {
  if (other != this) {
    std::swap(intensity_, other->intensity_);
    std::swap(is_chip_kick_, other->is_chip_kick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickAI_descriptor_;
  metadata.reflection = KickAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotAI::kRFieldNumber;
const int RobotAI::kThetaFieldNumber;
const int RobotAI::kOmegaFieldNumber;
const int RobotAI::kMovementIntensityFieldNumber;
const int RobotAI::kKickFieldNumber;
const int RobotAI::kFutureXFieldNumber;
const int RobotAI::kFutureYFieldNumber;
#endif  // !_MSC_VER

RobotAI::RobotAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotAI::InitAsDefaultInstance() {
  kick_ = const_cast< ::KickAI*>(&::KickAI::default_instance());
}

RobotAI::RobotAI(const RobotAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotAI::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  theta_ = 0;
  omega_ = 0;
  movement_intensity_ = 0;
  kick_ = NULL;
  future_x_ = 0u;
  future_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotAI::~RobotAI() {
  SharedDtor();
}

void RobotAI::SharedDtor() {
  if (this != default_instance_) {
    delete kick_;
  }
}

void RobotAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotAI_descriptor_;
}

const RobotAI& RobotAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fai_5fto_5fsim_2eproto();  return *default_instance_;
}

RobotAI* RobotAI::default_instance_ = NULL;

RobotAI* RobotAI::New() const {
  return new RobotAI;
}

void RobotAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    theta_ = 0;
    omega_ = 0;
    movement_intensity_ = 0;
    if (_has_bit(4)) {
      if (kick_ != NULL) kick_->::KickAI::Clear();
    }
    future_x_ = 0u;
    future_y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }
      
      // required double theta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_omega;
        break;
      }
      
      // required double omega = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_omega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_movement_intensity;
        break;
      }
      
      // required double movement_intensity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_movement_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &movement_intensity_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kick;
        break;
      }
      
      // required .KickAI kick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_future_x;
        break;
      }
      
      // optional uint32 future_x = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_future_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &future_x_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_future_y;
        break;
      }
      
      // optional uint32 future_y = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_future_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &future_y_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double r = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->r(), output);
  }
  
  // required double theta = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }
  
  // required double omega = 5;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->omega(), output);
  }
  
  // required double movement_intensity = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->movement_intensity(), output);
  }
  
  // required .KickAI kick = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->kick(), output);
  }
  
  // optional uint32 future_x = 8;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->future_x(), output);
  }
  
  // optional uint32 future_y = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->future_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double r = 3;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->r(), target);
  }
  
  // required double theta = 4;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }
  
  // required double omega = 5;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->omega(), target);
  }
  
  // required double movement_intensity = 6;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->movement_intensity(), target);
  }
  
  // required .KickAI kick = 7;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->kick(), target);
  }
  
  // optional uint32 future_x = 8;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->future_x(), target);
  }
  
  // optional uint32 future_y = 9;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->future_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotAI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double r = 3;
    if (has_r()) {
      total_size += 1 + 8;
    }
    
    // required double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }
    
    // required double omega = 5;
    if (has_omega()) {
      total_size += 1 + 8;
    }
    
    // required double movement_intensity = 6;
    if (has_movement_intensity()) {
      total_size += 1 + 8;
    }
    
    // required .KickAI kick = 7;
    if (has_kick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kick());
    }
    
    // optional uint32 future_x = 8;
    if (has_future_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->future_x());
    }
    
    // optional uint32 future_y = 9;
    if (has_future_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->future_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotAI::MergeFrom(const RobotAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_r(from.r());
    }
    if (from._has_bit(1)) {
      set_theta(from.theta());
    }
    if (from._has_bit(2)) {
      set_omega(from.omega());
    }
    if (from._has_bit(3)) {
      set_movement_intensity(from.movement_intensity());
    }
    if (from._has_bit(4)) {
      mutable_kick()->::KickAI::MergeFrom(from.kick());
    }
    if (from._has_bit(5)) {
      set_future_x(from.future_x());
    }
    if (from._has_bit(6)) {
      set_future_y(from.future_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotAI::CopyFrom(const RobotAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotAI::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_kick()) {
    if (!this->kick().IsInitialized()) return false;
  }
  return true;
}

void RobotAI::Swap(RobotAI* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(theta_, other->theta_);
    std::swap(omega_, other->omega_);
    std::swap(movement_intensity_, other->movement_intensity_);
    std::swap(kick_, other->kick_);
    std::swap(future_x_, other->future_x_);
    std::swap(future_y_, other->future_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotAI_descriptor_;
  metadata.reflection = RobotAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIToSim::kRobotsFieldNumber;
const int AIToSim::kTeamFieldNumber;
#endif  // !_MSC_VER

AIToSim::AIToSim()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIToSim::InitAsDefaultInstance() {
}

AIToSim::AIToSim(const AIToSim& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIToSim::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIToSim::~AIToSim() {
  SharedDtor();
}

void AIToSim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIToSim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIToSim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIToSim_descriptor_;
}

const AIToSim& AIToSim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fai_5fto_5fsim_2eproto();  return *default_instance_;
}

AIToSim* AIToSim::default_instance_ = NULL;

AIToSim* AIToSim::New() const {
  return new AIToSim;
}

void AIToSim::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    team_ = 0u;
  }
  robots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIToSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RobotAI robots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_robots;
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // required uint32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIToSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RobotAI robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robots(i), output);
  }
  
  // required uint32 team = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIToSim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RobotAI robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robots(i), target);
  }
  
  // required uint32 team = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIToSim::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }
    
  }
  // repeated .RobotAI robots = 1;
  total_size += 1 * this->robots_size();
  for (int i = 0; i < this->robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIToSim::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIToSim* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIToSim*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIToSim::MergeFrom(const AIToSim& from) {
  GOOGLE_CHECK_NE(&from, this);
  robots_.MergeFrom(from.robots_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIToSim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIToSim::CopyFrom(const AIToSim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIToSim::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < robots_size(); i++) {
    if (!this->robots(i).IsInitialized()) return false;
  }
  return true;
}

void AIToSim::Swap(AIToSim* other) {
  if (other != this) {
    robots_.Swap(&other->robots_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIToSim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIToSim_descriptor_;
  metadata.reflection = AIToSim_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
