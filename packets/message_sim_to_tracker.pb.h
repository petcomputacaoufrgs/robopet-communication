// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_message_5fsim_5fto_5ftracker_2eproto__INCLUDED
#define PROTOBUF_message_5fsim_5fto_5ftracker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_message_5fsim_5fto_5ftracker_2eproto();
void protobuf_BuildDesc_message_5fsim_5fto_5ftracker_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class BallSim;
class RobotSim;
class SimToTracker;

// ===================================================================

class BallSim : public ::google::protobuf::Message {
 public:
  BallSim();
  virtual ~BallSim();
  
  BallSim(const BallSim& from);
  
  inline BallSim& operator=(const BallSim& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BallSim& default_instance();
  void Swap(BallSim* other);
  
  // implements Message ----------------------------------------------
  
  BallSim* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);
  
  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void protobuf_BuildDesc_message_5fsim_5fto_5ftracker_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BallSim* default_instance_;
};
// -------------------------------------------------------------------

class RobotSim : public ::google::protobuf::Message {
 public:
  RobotSim();
  virtual ~RobotSim();
  
  RobotSim(const RobotSim& from);
  
  inline RobotSim& operator=(const RobotSim& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotSim& default_instance();
  void Swap(RobotSim* other);
  
  // implements Message ----------------------------------------------
  
  RobotSim* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);
  
  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);
  
  // required double theta = 3;
  inline bool has_theta() const;
  inline void clear_theta();
  inline double theta() const;
  inline void set_theta(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  double theta_;
  friend void protobuf_BuildDesc_message_5fsim_5fto_5ftracker_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RobotSim* default_instance_;
};
// -------------------------------------------------------------------

class SimToTracker : public ::google::protobuf::Message {
 public:
  SimToTracker();
  virtual ~SimToTracker();
  
  SimToTracker(const SimToTracker& from);
  
  inline SimToTracker& operator=(const SimToTracker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimToTracker& default_instance();
  void Swap(SimToTracker* other);
  
  // implements Message ----------------------------------------------
  
  SimToTracker* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .BallSim ball = 1;
  inline bool has_ball() const;
  inline void clear_ball();
  inline const ::BallSim& ball() const;
  inline ::BallSim* mutable_ball();
  
  // repeated .RobotSim robots_blue = 2;
  inline int robots_blue_size() const;
  inline void clear_robots_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotSim >& robots_blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotSim >* mutable_robots_blue();
  inline const ::RobotSim& robots_blue(int index) const;
  inline ::RobotSim* mutable_robots_blue(int index);
  inline ::RobotSim* add_robots_blue();
  
  // repeated .RobotSim robots_yellow = 3;
  inline int robots_yellow_size() const;
  inline void clear_robots_yellow();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotSim >& robots_yellow() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotSim >* mutable_robots_yellow();
  inline const ::RobotSim& robots_yellow(int index) const;
  inline ::RobotSim* mutable_robots_yellow(int index);
  inline ::RobotSim* add_robots_yellow();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::BallSim* ball_;
  ::google::protobuf::RepeatedPtrField< ::RobotSim > robots_blue_;
  ::google::protobuf::RepeatedPtrField< ::RobotSim > robots_yellow_;
  friend void protobuf_BuildDesc_message_5fsim_5fto_5ftracker_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimToTracker* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// BallSim

// required uint32 x = 1;
inline bool BallSim::has_x() const {
  return _has_bit(0);
}
inline void BallSim::clear_x() {
  x_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 BallSim::x() const {
  return x_;
}
inline void BallSim::set_x(::google::protobuf::uint32 value) {
  _set_bit(0);
  x_ = value;
}

// required uint32 y = 2;
inline bool BallSim::has_y() const {
  return _has_bit(1);
}
inline void BallSim::clear_y() {
  y_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 BallSim::y() const {
  return y_;
}
inline void BallSim::set_y(::google::protobuf::uint32 value) {
  _set_bit(1);
  y_ = value;
}

// -------------------------------------------------------------------

// RobotSim

// required uint32 x = 1;
inline bool RobotSim::has_x() const {
  return _has_bit(0);
}
inline void RobotSim::clear_x() {
  x_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 RobotSim::x() const {
  return x_;
}
inline void RobotSim::set_x(::google::protobuf::uint32 value) {
  _set_bit(0);
  x_ = value;
}

// required uint32 y = 2;
inline bool RobotSim::has_y() const {
  return _has_bit(1);
}
inline void RobotSim::clear_y() {
  y_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 RobotSim::y() const {
  return y_;
}
inline void RobotSim::set_y(::google::protobuf::uint32 value) {
  _set_bit(1);
  y_ = value;
}

// required double theta = 3;
inline bool RobotSim::has_theta() const {
  return _has_bit(2);
}
inline void RobotSim::clear_theta() {
  theta_ = 0;
  _clear_bit(2);
}
inline double RobotSim::theta() const {
  return theta_;
}
inline void RobotSim::set_theta(double value) {
  _set_bit(2);
  theta_ = value;
}

// -------------------------------------------------------------------

// SimToTracker

// required .BallSim ball = 1;
inline bool SimToTracker::has_ball() const {
  return _has_bit(0);
}
inline void SimToTracker::clear_ball() {
  if (ball_ != NULL) ball_->::BallSim::Clear();
  _clear_bit(0);
}
inline const ::BallSim& SimToTracker::ball() const {
  return ball_ != NULL ? *ball_ : *default_instance_->ball_;
}
inline ::BallSim* SimToTracker::mutable_ball() {
  _set_bit(0);
  if (ball_ == NULL) ball_ = new ::BallSim;
  return ball_;
}

// repeated .RobotSim robots_blue = 2;
inline int SimToTracker::robots_blue_size() const {
  return robots_blue_.size();
}
inline void SimToTracker::clear_robots_blue() {
  robots_blue_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotSim >&
SimToTracker::robots_blue() const {
  return robots_blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotSim >*
SimToTracker::mutable_robots_blue() {
  return &robots_blue_;
}
inline const ::RobotSim& SimToTracker::robots_blue(int index) const {
  return robots_blue_.Get(index);
}
inline ::RobotSim* SimToTracker::mutable_robots_blue(int index) {
  return robots_blue_.Mutable(index);
}
inline ::RobotSim* SimToTracker::add_robots_blue() {
  return robots_blue_.Add();
}

// repeated .RobotSim robots_yellow = 3;
inline int SimToTracker::robots_yellow_size() const {
  return robots_yellow_.size();
}
inline void SimToTracker::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotSim >&
SimToTracker::robots_yellow() const {
  return robots_yellow_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotSim >*
SimToTracker::mutable_robots_yellow() {
  return &robots_yellow_;
}
inline const ::RobotSim& SimToTracker::robots_yellow(int index) const {
  return robots_yellow_.Get(index);
}
inline ::RobotSim* SimToTracker::mutable_robots_yellow(int index) {
  return robots_yellow_.Mutable(index);
}
inline ::RobotSim* SimToTracker::add_robots_yellow() {
  return robots_yellow_.Add();
}

#endif  // PROTOBUF_message_5fsim_5fto_5ftracker_2eproto__INCLUDED
